{"version":3,"sources":["components/Test.js","components/ForceGraph.js","components/ConnectedForceGraph.js","redux/reducers/index.js","redux/reducers/nodes.js","redux/reducers/links.js","redux/store/middleware.js","redux/store/index.js","App.js","serviceWorker.js","index.js"],"names":["Test","ForceGraph","props","nodes","links","console","log","simulation","d3","force","strength","width","height","on","selection","selectAll","data","call","drag","enter","append","text","d","name","merge","attr","x","y","exit","remove","updateNodes","source","target","updateLinks","property","updateLabels","active","alphaTarget","restart","fx","fy","id","style","border","class","React","Component","ConnectedForceGraph","connect","state","dispatch","bindActionCreators","appReducer","combineReducers","action","type","ReduxThunk","require","default","middleware","applyMiddleware","store","compose","createStore","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6e0bf14e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Test = ({ }) =>\r\n  <>\r\n    <p>dit is een test</p>\r\n  </>\r\nexport default Test","import * as d3 from 'd3'\r\nimport React from 'react'\r\nimport Test from './Test'\r\n\r\nclass ForceGraph extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    var width = 600, height = 600\r\n    var nodes = props.nodes\r\n    var links = props.links\r\n\r\n    console.log(nodes)\r\n\r\n    //simulation\r\n    var simulation = d3.forceSimulation(nodes)\r\n      .force('charge', d3.forceManyBody().strength(-150))\r\n      .force('center', d3.forceCenter(width / 2, height / 2))\r\n      .force('link', d3.forceLink().links(links))\r\n      .on('tick', ticked);\r\n\r\n    //node properties\r\n    function updateNodes() {\r\n      var selection = d3.select('.nodes')\r\n        .selectAll('text')\r\n        .data(nodes)                        //bind data\r\n        .call(drag(simulation));            //allow dragging  \r\n\r\n      selection.enter()                     //for each row in the data do...\r\n        .append('text')                     //add element\r\n        .text(function (d) {                // add attributes\r\n          return d.name\r\n        })\r\n        .merge(selection)\r\n        .attr('x', function (d) { return d.x })\r\n        .attr('y', function (d) { return d.y })\r\n        .attr('dy', function (d) { return 5 })\r\n      //2nd way of doing the positioning\r\n      // .attr(\"transform\", function (d) {\r\n      //   return \"translate(\" + d.x + \",\" + d.y + \")\";\r\n      // })\r\n\r\n      selection.exit().remove()\r\n    }\r\n\r\n    //link properties\r\n    function updateLinks() {\r\n      var selection = d3.select('.links')\r\n        .selectAll('line')\r\n        .data(links)\r\n\r\n      selection.enter()\r\n        .append('line')\r\n        .merge(selection)\r\n        .attr('x1', function (d) {\r\n          return d.source.x\r\n        })\r\n        .attr('y1', function (d) {\r\n          return d.source.y\r\n        })\r\n        .attr('x2', function (d) {\r\n          return d.target.x\r\n        })\r\n        .attr('y2', function (d) {\r\n          return d.target.y\r\n        })\r\n\r\n      selection.exit().remove()\r\n    }\r\n\r\n    function updateLabels() {\r\n      var selection = d3.select('.labels')\r\n        .selectAll('text')\r\n        .data(links)\r\n\r\n      selection.enter()\r\n        .append('text')\r\n        .text(function (d) {\r\n          return d.property\r\n        })\r\n        .merge(selection)\r\n        .attr('x', function (d) {\r\n          return d.source.x\r\n        })\r\n        .attr('y', function (d) {\r\n          return d.source.y\r\n        })\r\n        .attr('dx', function (d) {\r\n          return d.target.x - d.source.x\r\n        })\r\n        .attr('dy', function (d) {\r\n          return d.target.y - d.source.y\r\n        })\r\n\r\n      selection.exit().remove()\r\n    }\r\n\r\n\r\n\r\n    //update drawing nodes and links\r\n    function ticked() {\r\n      updateNodes()\r\n      updateLinks()\r\n      updateLabels()\r\n    }\r\n\r\n    // dragging\r\n    const drag = (simulation) => {\r\n      const dragstarted = (d) => {\r\n        if (!d3.event.active) simulation.alphaTarget(0.3).restart();\r\n        d.fx = d.x;\r\n        d.fy = d.y;\r\n      };\r\n\r\n      const dragged = (d) => {\r\n        d.fx = d3.event.x;\r\n        d.fy = d3.event.y;\r\n      };\r\n\r\n      const dragended = (d) => {\r\n        if (!d3.event.active) simulation.alphaTarget(0);\r\n        d.fx = null;\r\n        d.fy = null;\r\n      };\r\n\r\n      return d3\r\n        .drag()\r\n        .on(\"start\", dragstarted)\r\n        .on(\"drag\", dragged)\r\n        .on(\"end\", dragended);\r\n    };\r\n\r\n  }\r\n\r\n  render() {\r\n    return <div id=\"content\">\r\n      <svg width=\"700\" height=\"600\" style={{ border: \"1px solid black\" }}>\r\n        <g class=\"links\"></g>\r\n        <g class=\"nodes\"></g>\r\n        <g class=\"labels\"></g>\r\n        <g class=\"linktext\"></g>\r\n      </svg>\r\n      <Test></Test>\r\n    </div >;\r\n  }\r\n}\r\n\r\nexport default ForceGraph\r\n\r\nclass Node extends React.Component {\r\n\r\n}\r\n\r\nclass Link extends React.Component {\r\n\r\n}","import { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\n\r\nimport ForceGraph from './ForceGraph'\r\n\r\n\r\nconst mapStateToProps = (state, props) => {\r\n  return {\r\n    nodes: state.nodes,\r\n    links: state.links\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) =>\r\n  bindActionCreators({}, dispatch)\r\n\r\nconst ConnectedForceGraph = connect(mapStateToProps, mapDispatchToProps)(ForceGraph)\r\n\r\nexport default ConnectedForceGraph","// Root Reducer, combines all reducers into one single reducer\r\n\r\nimport { combineReducers } from 'redux'\r\n\r\nimport nodesReducer from './nodes'\r\nimport linkesReducer from './links'\r\n\r\n//import connectionReducer from './connection'\r\n\r\nconst appReducer = combineReducers({\r\n  nodes: nodesReducer,\r\n  links: linkesReducer,\r\n})\r\n\r\nexport default appReducer","//import { CREATE_POST, EDIT_POST } from '../actionTypes'\r\n\r\nexport default function nodeReducer(state = [\r\n  { name: 'A' },\r\n  { name: 'B' },\r\n  { name: 'C' },\r\n  { name: 'D' },\r\n  { name: 'E' },\r\n  { name: 'F' },\r\n  { name: 'G' },\r\n  { name: 'H' },], action) {\r\n  switch (action.type) {\r\n    //   case CREATE_POST: {\r\n    //     const { type, ...post } = action\r\n    //     return [...state, post]\r\n    //   }\r\n\r\n    //   case EDIT_POST: {\r\n    //     const { type, id, ...newPost } = action\r\n    //     return state.map((oldPost, index) =>\r\n    //       action.id === index\r\n    //         ? { ...oldPost, ...newPost }\r\n    //         : oldPost\r\n    //     )\r\n    //   }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}","//import { CREATE_POST, EDIT_POST } from '../actionTypes'\r\n\r\nexport default function linkReducer(state = [\r\n  { source: 0, target: 1, property: 'dirk' },\r\n  { source: 0, target: 2, property: 'ryan' },\r\n  //{ source: 0, target: 3 },\r\n  { source: 1, target: 6, property: 'wisse' },\r\n  { source: 3, target: 4, property: 'bart' },\r\n  { source: 3, target: 7, property: 'henk' },\r\n  { source: 4, target: 5, property: 'john' },\r\n  { source: 4, target: 7, property: 'test' }\r\n], action) {\r\n  switch (action.type) {\r\n    //   case CREATE_POST: {\r\n    //     const { type, ...post } = action\r\n    //     return [...state, post]\r\n    //   }\r\n\r\n    //   case EDIT_POST: {\r\n    //     const { type, id, ...newPost } = action\r\n    //     return state.map((oldPost, index) =>\r\n    //       action.id === index\r\n    //         ? { ...oldPost, ...newPost }\r\n    //         : oldPost\r\n    //     )\r\n    //   }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}","import { applyMiddleware } from 'redux'\r\n\r\nconst ReduxThunk = require('redux-thunk').default\r\n\r\n\r\n\r\nconst middleware = applyMiddleware(ReduxThunk)\r\n\r\nexport default middleware","// redux\r\nimport { createStore, compose } from 'redux'\r\nimport appReducer from '../reducers'\r\nimport middleware from './middleware'\r\n\r\n\r\nconst enhancer = compose(\r\n  middleware,\r\n  //persistState(getSessionKey())\r\n)\r\nconst store = createStore(appReducer, {}, middleware)\r\n\r\nexport default store","import React from 'react';\nimport data from './data/data.json';\nimport './App.css';\nimport ConnectedForceGraph from './components/ConnectedForceGraph';\n\n\nimport { Provider } from 'react-redux'\n\n// create Redux store\nimport store from './redux/store'\n\nconst App = () => (\n  <Provider store={store}>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Force Graph Example\n      </header>\n      <section className=\"Main\">\n        <ConnectedForceGraph />\n      </section>\n    </div>\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}